//
//  FeedListPresenter.swift
//  TheVargo
//
//  Created by Andre Souza on 09/07/2018.
//  Copyright (c) 2018 AndreSamples. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class FeedListPresenter {

    // MARK: - Private properties -

    private unowned let _view: FeedListViewInterface
    private let _interactor: FeedListInteractorInterface
    private let _wireframe: FeedListWireframeInterface
    
    private var _feed: Feed = Feed() {
        didSet {
            _view.reloadData()
        }
    }

    // MARK: - Lifecycle -

    init(wireframe: FeedListWireframeInterface,
         view: FeedListViewInterface,
         interactor: FeedListInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension FeedListPresenter: FeedListPresenterInterface {
    
    func viewDidLoad() {
        _view.showLoading(true)
        _interactor.getFeeds(page: 1, completion: { [weak self] result in
            self?._handleFeedResult(result)
        })
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOrItems(in section: Int) -> Int {
        return _feed.items?.count ?? 0
    }
    
    func item(at indexPath: IndexPath) -> FeedItemInterface? {
        return _feed.items?[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        if let item = _feed.items?[indexPath.row] {
            _wireframe.navigate(to: .detail(item))
        }
    }
    
}

// MARK: - Utility -

extension FeedListPresenter {
    
    private func _handleFeedResult(_ result: RequestResultType<Feed>) {
        switch result {
        case .success(let feed):
            _feed = feed
            _view.showLoading(false)
            break
        case .failure(let errorResponse):
//            _view.showError(error: errorResponse, target: self, action: <#T##Selector#>)
            break
        }
    }
    
}
