//
//  FeedListPresenter.swift
//  TheVargo
//
//  Created by Andre Souza on 09/07/2018.
//  Copyright (c) 2018 AndreSamples. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class FeedListPresenter {

    // MARK: - Private properties -

    private unowned let _view: FeedListViewInterface
    private let _interactor: FeedListInteractorInterface
    private let _wireframe: FeedListWireframeInterface

    private var _isLoading: Bool = false
    private var _feed: Feed = Feed()

    // MARK: - Lifecycle -

    init(wireframe: FeedListWireframeInterface,
         view: FeedListViewInterface,
         interactor: FeedListInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension FeedListPresenter: FeedListPresenterInterface {
    
    func viewDidLoad() {
        _loadMoreItems()
    }
    
    func _loadMoreItems() {
        _view.showFooterLoading(true)
        if _feed.page < _feed.totalPages {
            if !_isLoading {
                _isLoading = true
                _interactor.getFeeds(page: (_feed.page+1), completion: { [weak self] result in
                    self?._handleFeedResult(result)
                })
            }
        } else {
            _view.showFooterUpdatedMessage(message: "You're up to date! üéâ")
        }
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOrItems(in section: Int) -> Int {
        return _feed.items.count
    }
    
    func item(at indexPath: IndexPath) -> FeedItemInterface? {
        return _feed.items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        _wireframe.navigate(to: .detail(_feed.items[indexPath.row]))
    }
    
}

// MARK: - Utility -

extension FeedListPresenter {
    
    @objc private func _loadItems() {
        _loadMoreItems()
    }
    
    private func _handleFeedResult(_ result: RequestResultType<Feed>) {
        _isLoading = false
        switch result {
        case .success(let feed):
            incrementFeed(feed)
            _view.reloadData()
            _view.showFooterLoading(false)
            break
        case .failure(let errorResponse):
            _view.showFooterLoading(false)
            _view.showError(error: errorResponse, target: self, action: #selector(self._loadItems))
            break
        }
    }
    
    //Necessary to simulate pagination
    private func incrementFeed(_ feed: Feed) {
        _feed.page = feed.page
        _feed.totalPages = feed.totalPages
        _feed.items.append(contentsOf: feed.items)
    }
    
}
